Terminals unused in grammar

   DIV
   OPERATOR
   READ
   NONE


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: PROGRAM ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' NUM '.' '.' NUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | %empty

   13 subprogram_declaration: subprogram_head declarations compound_statement

   14 subprogram_head: FUNCTION ID arguments ':' standard_type ';'
   15                | PROCEDURE ID arguments ';'

   16 arguments: '(' parameter_list ')'
   17          | %empty

   18 parameter_list: identifier_list ':' type
   19               | parameter_list ',' identifier_list ':' type
   20               | parameter_list ';' identifier_list ':' type

   21 compound_statement: BEGIN_TOKEN optional_statements END_TOKEN

   22 optional_statements: statement_list
   23                    | %empty

   24 statement_list: statement
   25               | statement_list ';' statement

   26 statement: variable ASSIGNOP expression
   27          | procedure_statement
   28          | compound_statement
   29          | IF expression THEN statement ELSE statement
   30          | WHILE expression DO statement
   31          | WRITE '(' ID ')'

   32 variable: ID
   33         | ID '[' expression ']'

   34 procedure_statement: ID
   35                    | ID '(' expression_list ')'

   36 expression_list: expression
   37                | expression_list ',' expression

   38 expression: simple_expression
   39           | simple_expression RELOP simple_expression

   40 simple_expression: term
   41                  | t_PLUS term
   42                  | t_MINUS term
   43                  | simple_expression t_PLUS term
   44                  | simple_expression t_MINUS term
   45                  | simple_expression OR term
   46                  | simple_expression AND term

   47 term: factor
   48     | term MODULO factor
   49     | term MUL factor
   50     | term M_DIV factor

   51 factor: variable
   52       | ID '(' expression_list ')'
   53       | NUM
   54       | '(' expression ')'
   55       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 16 31 35 52 54
')' (41) 2 16 31 35 52 54
',' (44) 4 19 37
'.' (46) 2 8
':' (58) 5 14 18 19 20
';' (59) 2 5 11 14 15 20 25
'[' (91) 8 33
']' (93) 8 33
error (256)
PROGRAM (258) 2
NUM (259) 8 53
ID (260) 2 3 4 14 15 31 32 33 34 35 52
VAR (261) 5
DIV (262)
MODULO (263) 48
MUL (264) 49
M_DIV (265) 50
INTEGER (266) 9
BEGIN_TOKEN (267) 21
END_TOKEN (268) 21
OPERATOR (269)
ASSIGNOP (270) 26
READ (271)
WRITE (272) 31
REAL (273) 10
ARRAY (274) 8
OF (275) 8
FUNCTION (276) 14
PROCEDURE (277) 15
IF (278) 29
THEN (279) 29
ELSE (280) 29
WHILE (281) 30
DO (282) 30
RELOP (283) 39
OR (284) 45
t_PLUS (285) 41 43
t_MINUS (286) 42 44
AND (287) 46
NOT (288) 55
NONE (289)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 2, on right: 0
$@1 (45)
    on left: 1, on right: 2
identifier_list (46)
    on left: 3 4, on right: 2 4 5 18 19 20
declarations (47)
    on left: 5 6, on right: 2 5 13
type (48)
    on left: 7 8, on right: 5 18 19 20
standard_type (49)
    on left: 9 10, on right: 7 8 14
subprogram_declarations (50)
    on left: 11 12, on right: 2 11
subprogram_declaration (51)
    on left: 13, on right: 11
subprogram_head (52)
    on left: 14 15, on right: 13
arguments (53)
    on left: 16 17, on right: 14 15
parameter_list (54)
    on left: 18 19 20, on right: 16 19 20
compound_statement (55)
    on left: 21, on right: 2 13 28
optional_statements (56)
    on left: 22 23, on right: 21
statement_list (57)
    on left: 24 25, on right: 22 25
statement (58)
    on left: 26 27 28 29 30 31, on right: 24 25 29 30
variable (59)
    on left: 32 33, on right: 26 51
procedure_statement (60)
    on left: 34 35, on right: 27
expression_list (61)
    on left: 36 37, on right: 35 37 52
expression (62)
    on left: 38 39, on right: 26 29 30 33 36 37 54
simple_expression (63)
    on left: 40 41 42 43 44 45 46, on right: 38 39 43 44 45 46
term (64)
    on left: 47 48 49 50, on right: 40 41 42 43 44 45 46 48 49 50
factor (65)
    on left: 51 52 53 54 55, on right: 47 48 49 50 55


State 0

    0 $accept: . program $end
    2 program: . PROGRAM ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    2 program: PROGRAM . ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    2 program: PROGRAM ID . '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    2 program: PROGRAM ID '(' . identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.'
    3 identifier_list: . ID
    4                | . identifier_list ',' ID

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 7

    2 program: PROGRAM ID '(' identifier_list . ')' ';' $@1 declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    2 program: PROGRAM ID '(' identifier_list ')' . ';' $@1 declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 10


State 9

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 11


State 10

    1 $@1: . %empty
    2 program: PROGRAM ID '(' identifier_list ')' ';' . $@1 declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 1 ($@1)

    $@1  go to state 12


State 11

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 12

    2 program: PROGRAM ID '(' identifier_list ')' ';' $@1 . declarations subprogram_declarations compound_statement '.'
    5 declarations: . declarations VAR identifier_list ':' type ';'
    6             | . %empty

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 13

    2 program: PROGRAM ID '(' identifier_list ')' ';' $@1 declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'
   11 subprogram_declarations: . subprogram_declarations subprogram_declaration ';'
   12                        | . %empty  [BEGIN_TOKEN, FUNCTION, PROCEDURE]

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    3 identifier_list: . ID
    4                | . identifier_list ',' ID
    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 16


State 15

    2 program: PROGRAM ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: . subprogram_head declarations compound_statement
   14 subprogram_head: . FUNCTION ID arguments ':' standard_type ';'
   15                | . PROCEDURE ID arguments ';'
   21 compound_statement: . BEGIN_TOKEN optional_statements END_TOKEN

    BEGIN_TOKEN  shift, and go to state 17
    FUNCTION     shift, and go to state 18
    PROCEDURE    shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 23


State 17

   21 compound_statement: . BEGIN_TOKEN optional_statements END_TOKEN
   21                   | BEGIN_TOKEN . optional_statements END_TOKEN
   22 optional_statements: . statement_list
   23                    | . %empty  [END_TOKEN]
   24 statement_list: . statement
   25               | . statement_list ';' statement
   26 statement: . variable ASSIGNOP expression
   27          | . procedure_statement
   28          | . compound_statement
   29          | . IF expression THEN statement ELSE statement
   30          | . WHILE expression DO statement
   31          | . WRITE '(' ID ')'
   32 variable: . ID
   33         | . ID '[' expression ']'
   34 procedure_statement: . ID
   35                    | . ID '(' expression_list ')'

    ID           shift, and go to state 24
    BEGIN_TOKEN  shift, and go to state 17
    WRITE        shift, and go to state 25
    IF           shift, and go to state 26
    WHILE        shift, and go to state 27

    $default  reduce using rule 23 (optional_statements)

    compound_statement   go to state 28
    optional_statements  go to state 29
    statement_list       go to state 30
    statement            go to state 31
    variable             go to state 32
    procedure_statement  go to state 33


State 18

   14 subprogram_head: FUNCTION . ID arguments ':' standard_type ';'

    ID  shift, and go to state 34


State 19

   15 subprogram_head: PROCEDURE . ID arguments ';'

    ID  shift, and go to state 35


State 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 36


State 21

    5 declarations: . declarations VAR identifier_list ':' type ';'
    6             | . %empty
   13 subprogram_declaration: subprogram_head . declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 37


State 22

    2 program: PROGRAM ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 38


State 23

    5 declarations: declarations VAR identifier_list ':' . type ';'
    7 type: . standard_type
    8     | . ARRAY '[' NUM '.' '.' NUM ']' OF standard_type
    9 standard_type: . INTEGER
   10              | . REAL

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40
    ARRAY    shift, and go to state 41

    type           go to state 42
    standard_type  go to state 43


State 24

   32 variable: ID .  [ASSIGNOP]
   33         | ID . '[' expression ']'
   34 procedure_statement: ID .  [END_TOKEN, ELSE, ';']
   35                    | ID . '(' expression_list ')'

    '('  shift, and go to state 44
    '['  shift, and go to state 45

    ASSIGNOP  reduce using rule 32 (variable)
    $default  reduce using rule 34 (procedure_statement)


State 25

   31 statement: WRITE . '(' ID ')'

    '('  shift, and go to state 46


State 26

   29 statement: IF . expression THEN statement ELSE statement
   32 variable: . ID
   33         | . ID '[' expression ']'
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression         go to state 54
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 27

   30 statement: WHILE . expression DO statement
   32 variable: . ID
   33         | . ID '[' expression ']'
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression         go to state 58
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 28

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 29

   21 compound_statement: BEGIN_TOKEN optional_statements . END_TOKEN

    END_TOKEN  shift, and go to state 59


State 30

   22 optional_statements: statement_list .  [END_TOKEN]
   25 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 60

    $default  reduce using rule 22 (optional_statements)


State 31

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 32

   26 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 61


State 33

   27 statement: procedure_statement .

    $default  reduce using rule 27 (statement)


State 34

   14 subprogram_head: FUNCTION ID . arguments ':' standard_type ';'
   16 arguments: . '(' parameter_list ')'
   17          | . %empty  [':']

    '('  shift, and go to state 62

    $default  reduce using rule 17 (arguments)

    arguments  go to state 63


State 35

   15 subprogram_head: PROCEDURE ID . arguments ';'
   16 arguments: . '(' parameter_list ')'
   17          | . %empty  [';']

    '('  shift, and go to state 62

    $default  reduce using rule 17 (arguments)

    arguments  go to state 64


State 36

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


State 37

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . compound_statement
   21 compound_statement: . BEGIN_TOKEN optional_statements END_TOKEN

    VAR          shift, and go to state 14
    BEGIN_TOKEN  shift, and go to state 17

    compound_statement  go to state 65


State 38

    2 program: PROGRAM ID '(' identifier_list ')' ';' $@1 declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 39

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


State 40

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


State 41

    8 type: ARRAY . '[' NUM '.' '.' NUM ']' OF standard_type

    '['  shift, and go to state 66


State 42

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 67


State 43

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 44

   32 variable: . ID
   33         | . ID '[' expression ']'
   35 procedure_statement: ID '(' . expression_list ')'
   36 expression_list: . expression
   37                | . expression_list ',' expression
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression_list    go to state 68
    expression         go to state 69
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 45

   32 variable: . ID
   33         | . ID '[' expression ']'
   33         | ID '[' . expression ']'
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression         go to state 70
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 46

   31 statement: WRITE '(' . ID ')'

    ID  shift, and go to state 71


State 47

   53 factor: NUM .

    $default  reduce using rule 53 (factor)


State 48

   32 variable: ID .  [MODULO, MUL, M_DIV, END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   33         | ID . '[' expression ']'
   52 factor: ID . '(' expression_list ')'

    '('  shift, and go to state 72
    '['  shift, and go to state 45

    $default  reduce using rule 32 (variable)


State 49

   32 variable: . ID
   33         | . ID '[' expression ']'
   41 simple_expression: t_PLUS . term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    term      go to state 73
    factor    go to state 57


State 50

   32 variable: . ID
   33         | . ID '[' expression ']'
   42 simple_expression: t_MINUS . term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    term      go to state 74
    factor    go to state 57


State 51

   32 variable: . ID
   33         | . ID '[' expression ']'
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor
   55       | NOT . factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    factor    go to state 75


State 52

   32 variable: . ID
   33         | . ID '[' expression ']'
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   54       | '(' . expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression         go to state 76
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 53

   51 factor: variable .

    $default  reduce using rule 51 (factor)


State 54

   29 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 77


State 55

   38 expression: simple_expression .  [END_TOKEN, THEN, ELSE, DO, ')', ';', ',', ']']
   39           | simple_expression . RELOP simple_expression
   43 simple_expression: simple_expression . t_PLUS term
   44                  | simple_expression . t_MINUS term
   45                  | simple_expression . OR term
   46                  | simple_expression . AND term

    RELOP    shift, and go to state 78
    OR       shift, and go to state 79
    t_PLUS   shift, and go to state 80
    t_MINUS  shift, and go to state 81
    AND      shift, and go to state 82

    $default  reduce using rule 38 (expression)


State 56

   40 simple_expression: term .  [END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   48 term: term . MODULO factor
   49     | term . MUL factor
   50     | term . M_DIV factor

    MODULO  shift, and go to state 83
    MUL     shift, and go to state 84
    M_DIV   shift, and go to state 85

    $default  reduce using rule 40 (simple_expression)


State 57

   47 term: factor .

    $default  reduce using rule 47 (term)


State 58

   30 statement: WHILE expression . DO statement

    DO  shift, and go to state 86


State 59

   21 compound_statement: BEGIN_TOKEN optional_statements END_TOKEN .

    $default  reduce using rule 21 (compound_statement)


State 60

   21 compound_statement: . BEGIN_TOKEN optional_statements END_TOKEN
   25 statement_list: statement_list ';' . statement
   26 statement: . variable ASSIGNOP expression
   27          | . procedure_statement
   28          | . compound_statement
   29          | . IF expression THEN statement ELSE statement
   30          | . WHILE expression DO statement
   31          | . WRITE '(' ID ')'
   32 variable: . ID
   33         | . ID '[' expression ']'
   34 procedure_statement: . ID
   35                    | . ID '(' expression_list ')'

    ID           shift, and go to state 24
    BEGIN_TOKEN  shift, and go to state 17
    WRITE        shift, and go to state 25
    IF           shift, and go to state 26
    WHILE        shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 87
    variable             go to state 32
    procedure_statement  go to state 33


State 61

   26 statement: variable ASSIGNOP . expression
   32 variable: . ID
   33         | . ID '[' expression ']'
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression         go to state 88
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 62

    3 identifier_list: . ID
    4                | . identifier_list ',' ID
   16 arguments: '(' . parameter_list ')'
   18 parameter_list: . identifier_list ':' type
   19               | . parameter_list ',' identifier_list ':' type
   20               | . parameter_list ';' identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 89
    parameter_list   go to state 90


State 63

   14 subprogram_head: FUNCTION ID arguments . ':' standard_type ';'

    ':'  shift, and go to state 91


State 64

   15 subprogram_head: PROCEDURE ID arguments . ';'

    ';'  shift, and go to state 92


State 65

   13 subprogram_declaration: subprogram_head declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 66

    8 type: ARRAY '[' . NUM '.' '.' NUM ']' OF standard_type

    NUM  shift, and go to state 93


State 67

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 68

   35 procedure_statement: ID '(' expression_list . ')'
   37 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 94
    ','  shift, and go to state 95


State 69

   36 expression_list: expression .

    $default  reduce using rule 36 (expression_list)


State 70

   33 variable: ID '[' expression . ']'

    ']'  shift, and go to state 96


State 71

   31 statement: WRITE '(' ID . ')'

    ')'  shift, and go to state 97


State 72

   32 variable: . ID
   33         | . ID '[' expression ']'
   36 expression_list: . expression
   37                | . expression_list ',' expression
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   52       | ID '(' . expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression_list    go to state 98
    expression         go to state 69
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 73

   41 simple_expression: t_PLUS term .  [END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   48 term: term . MODULO factor
   49     | term . MUL factor
   50     | term . M_DIV factor

    MODULO  shift, and go to state 83
    MUL     shift, and go to state 84
    M_DIV   shift, and go to state 85

    $default  reduce using rule 41 (simple_expression)


State 74

   42 simple_expression: t_MINUS term .  [END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   48 term: term . MODULO factor
   49     | term . MUL factor
   50     | term . M_DIV factor

    MODULO  shift, and go to state 83
    MUL     shift, and go to state 84
    M_DIV   shift, and go to state 85

    $default  reduce using rule 42 (simple_expression)


State 75

   55 factor: NOT factor .

    $default  reduce using rule 55 (factor)


State 76

   54 factor: '(' expression . ')'

    ')'  shift, and go to state 99


State 77

   21 compound_statement: . BEGIN_TOKEN optional_statements END_TOKEN
   26 statement: . variable ASSIGNOP expression
   27          | . procedure_statement
   28          | . compound_statement
   29          | . IF expression THEN statement ELSE statement
   29          | IF expression THEN . statement ELSE statement
   30          | . WHILE expression DO statement
   31          | . WRITE '(' ID ')'
   32 variable: . ID
   33         | . ID '[' expression ']'
   34 procedure_statement: . ID
   35                    | . ID '(' expression_list ')'

    ID           shift, and go to state 24
    BEGIN_TOKEN  shift, and go to state 17
    WRITE        shift, and go to state 25
    IF           shift, and go to state 26
    WHILE        shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 100
    variable             go to state 32
    procedure_statement  go to state 33


State 78

   32 variable: . ID
   33         | . ID '[' expression ']'
   39 expression: simple_expression RELOP . simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    simple_expression  go to state 101
    term               go to state 56
    factor             go to state 57


State 79

   32 variable: . ID
   33         | . ID '[' expression ']'
   45 simple_expression: simple_expression OR . term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    term      go to state 102
    factor    go to state 57


State 80

   32 variable: . ID
   33         | . ID '[' expression ']'
   43 simple_expression: simple_expression t_PLUS . term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    term      go to state 103
    factor    go to state 57


State 81

   32 variable: . ID
   33         | . ID '[' expression ']'
   44 simple_expression: simple_expression t_MINUS . term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    term      go to state 104
    factor    go to state 57


State 82

   32 variable: . ID
   33         | . ID '[' expression ']'
   46 simple_expression: simple_expression AND . term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    term      go to state 105
    factor    go to state 57


State 83

   32 variable: . ID
   33         | . ID '[' expression ']'
   48 term: term MODULO . factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    factor    go to state 106


State 84

   32 variable: . ID
   33         | . ID '[' expression ']'
   49 term: term MUL . factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    factor    go to state 107


State 85

   32 variable: . ID
   33         | . ID '[' expression ']'
   50 term: term M_DIV . factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM  shift, and go to state 47
    ID   shift, and go to state 48
    NOT  shift, and go to state 51
    '('  shift, and go to state 52

    variable  go to state 53
    factor    go to state 108


State 86

   21 compound_statement: . BEGIN_TOKEN optional_statements END_TOKEN
   26 statement: . variable ASSIGNOP expression
   27          | . procedure_statement
   28          | . compound_statement
   29          | . IF expression THEN statement ELSE statement
   30          | . WHILE expression DO statement
   30          | WHILE expression DO . statement
   31          | . WRITE '(' ID ')'
   32 variable: . ID
   33         | . ID '[' expression ']'
   34 procedure_statement: . ID
   35                    | . ID '(' expression_list ')'

    ID           shift, and go to state 24
    BEGIN_TOKEN  shift, and go to state 17
    WRITE        shift, and go to state 25
    IF           shift, and go to state 26
    WHILE        shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 109
    variable             go to state 32
    procedure_statement  go to state 33


State 87

   25 statement_list: statement_list ';' statement .

    $default  reduce using rule 25 (statement_list)


State 88

   26 statement: variable ASSIGNOP expression .

    $default  reduce using rule 26 (statement)


State 89

    4 identifier_list: identifier_list . ',' ID
   18 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 110


State 90

   16 arguments: '(' parameter_list . ')'
   19 parameter_list: parameter_list . ',' identifier_list ':' type
   20               | parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 111
    ';'  shift, and go to state 112
    ','  shift, and go to state 113


State 91

    9 standard_type: . INTEGER
   10              | . REAL
   14 subprogram_head: FUNCTION ID arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 114


State 92

   15 subprogram_head: PROCEDURE ID arguments ';' .

    $default  reduce using rule 15 (subprogram_head)


State 93

    8 type: ARRAY '[' NUM . '.' '.' NUM ']' OF standard_type

    '.'  shift, and go to state 115


State 94

   35 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 35 (procedure_statement)


State 95

   32 variable: . ID
   33         | . ID '[' expression ']'
   37 expression_list: expression_list ',' . expression
   38 expression: . simple_expression
   39           | . simple_expression RELOP simple_expression
   40 simple_expression: . term
   41                  | . t_PLUS term
   42                  | . t_MINUS term
   43                  | . simple_expression t_PLUS term
   44                  | . simple_expression t_MINUS term
   45                  | . simple_expression OR term
   46                  | . simple_expression AND term
   47 term: . factor
   48     | . term MODULO factor
   49     | . term MUL factor
   50     | . term M_DIV factor
   51 factor: . variable
   52       | . ID '(' expression_list ')'
   53       | . NUM
   54       | . '(' expression ')'
   55       | . NOT factor

    NUM      shift, and go to state 47
    ID       shift, and go to state 48
    t_PLUS   shift, and go to state 49
    t_MINUS  shift, and go to state 50
    NOT      shift, and go to state 51
    '('      shift, and go to state 52

    variable           go to state 53
    expression         go to state 116
    simple_expression  go to state 55
    term               go to state 56
    factor             go to state 57


State 96

   33 variable: ID '[' expression ']' .

    $default  reduce using rule 33 (variable)


State 97

   31 statement: WRITE '(' ID ')' .

    $default  reduce using rule 31 (statement)


State 98

   37 expression_list: expression_list . ',' expression
   52 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 117
    ','  shift, and go to state 95


State 99

   54 factor: '(' expression ')' .

    $default  reduce using rule 54 (factor)


State 100

   29 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 118


State 101

   39 expression: simple_expression RELOP simple_expression .  [END_TOKEN, THEN, ELSE, DO, ')', ';', ',', ']']
   43 simple_expression: simple_expression . t_PLUS term
   44                  | simple_expression . t_MINUS term
   45                  | simple_expression . OR term
   46                  | simple_expression . AND term

    OR       shift, and go to state 79
    t_PLUS   shift, and go to state 80
    t_MINUS  shift, and go to state 81
    AND      shift, and go to state 82

    $default  reduce using rule 39 (expression)


State 102

   45 simple_expression: simple_expression OR term .  [END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   48 term: term . MODULO factor
   49     | term . MUL factor
   50     | term . M_DIV factor

    MODULO  shift, and go to state 83
    MUL     shift, and go to state 84
    M_DIV   shift, and go to state 85

    $default  reduce using rule 45 (simple_expression)


State 103

   43 simple_expression: simple_expression t_PLUS term .  [END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   48 term: term . MODULO factor
   49     | term . MUL factor
   50     | term . M_DIV factor

    MODULO  shift, and go to state 83
    MUL     shift, and go to state 84
    M_DIV   shift, and go to state 85

    $default  reduce using rule 43 (simple_expression)


State 104

   44 simple_expression: simple_expression t_MINUS term .  [END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   48 term: term . MODULO factor
   49     | term . MUL factor
   50     | term . M_DIV factor

    MODULO  shift, and go to state 83
    MUL     shift, and go to state 84
    M_DIV   shift, and go to state 85

    $default  reduce using rule 44 (simple_expression)


State 105

   46 simple_expression: simple_expression AND term .  [END_TOKEN, THEN, ELSE, DO, RELOP, OR, t_PLUS, t_MINUS, AND, ')', ';', ',', ']']
   48 term: term . MODULO factor
   49     | term . MUL factor
   50     | term . M_DIV factor

    MODULO  shift, and go to state 83
    MUL     shift, and go to state 84
    M_DIV   shift, and go to state 85

    $default  reduce using rule 46 (simple_expression)


State 106

   48 term: term MODULO factor .

    $default  reduce using rule 48 (term)


State 107

   49 term: term MUL factor .

    $default  reduce using rule 49 (term)


State 108

   50 term: term M_DIV factor .

    $default  reduce using rule 50 (term)


State 109

   30 statement: WHILE expression DO statement .

    $default  reduce using rule 30 (statement)


State 110

    7 type: . standard_type
    8     | . ARRAY '[' NUM '.' '.' NUM ']' OF standard_type
    9 standard_type: . INTEGER
   10              | . REAL
   18 parameter_list: identifier_list ':' . type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40
    ARRAY    shift, and go to state 41

    type           go to state 119
    standard_type  go to state 43


State 111

   16 arguments: '(' parameter_list ')' .

    $default  reduce using rule 16 (arguments)


State 112

    3 identifier_list: . ID
    4                | . identifier_list ',' ID
   20 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 120


State 113

    3 identifier_list: . ID
    4                | . identifier_list ',' ID
   19 parameter_list: parameter_list ',' . identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 121


State 114

   14 subprogram_head: FUNCTION ID arguments ':' standard_type . ';'

    ';'  shift, and go to state 122


State 115

    8 type: ARRAY '[' NUM '.' . '.' NUM ']' OF standard_type

    '.'  shift, and go to state 123


State 116

   37 expression_list: expression_list ',' expression .

    $default  reduce using rule 37 (expression_list)


State 117

   52 factor: ID '(' expression_list ')' .

    $default  reduce using rule 52 (factor)


State 118

   21 compound_statement: . BEGIN_TOKEN optional_statements END_TOKEN
   26 statement: . variable ASSIGNOP expression
   27          | . procedure_statement
   28          | . compound_statement
   29          | . IF expression THEN statement ELSE statement
   29          | IF expression THEN statement ELSE . statement
   30          | . WHILE expression DO statement
   31          | . WRITE '(' ID ')'
   32 variable: . ID
   33         | . ID '[' expression ']'
   34 procedure_statement: . ID
   35                    | . ID '(' expression_list ')'

    ID           shift, and go to state 24
    BEGIN_TOKEN  shift, and go to state 17
    WRITE        shift, and go to state 25
    IF           shift, and go to state 26
    WHILE        shift, and go to state 27

    compound_statement   go to state 28
    statement            go to state 124
    variable             go to state 32
    procedure_statement  go to state 33


State 119

   18 parameter_list: identifier_list ':' type .

    $default  reduce using rule 18 (parameter_list)


State 120

    4 identifier_list: identifier_list . ',' ID
   20 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 125


State 121

    4 identifier_list: identifier_list . ',' ID
   19 parameter_list: parameter_list ',' identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 126


State 122

   14 subprogram_head: FUNCTION ID arguments ':' standard_type ';' .

    $default  reduce using rule 14 (subprogram_head)


State 123

    8 type: ARRAY '[' NUM '.' '.' . NUM ']' OF standard_type

    NUM  shift, and go to state 127


State 124

   29 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 29 (statement)


State 125

    7 type: . standard_type
    8     | . ARRAY '[' NUM '.' '.' NUM ']' OF standard_type
    9 standard_type: . INTEGER
   10              | . REAL
   20 parameter_list: parameter_list ';' identifier_list ':' . type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40
    ARRAY    shift, and go to state 41

    type           go to state 128
    standard_type  go to state 43


State 126

    7 type: . standard_type
    8     | . ARRAY '[' NUM '.' '.' NUM ']' OF standard_type
    9 standard_type: . INTEGER
   10              | . REAL
   19 parameter_list: parameter_list ',' identifier_list ':' . type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40
    ARRAY    shift, and go to state 41

    type           go to state 129
    standard_type  go to state 43


State 127

    8 type: ARRAY '[' NUM '.' '.' NUM . ']' OF standard_type

    ']'  shift, and go to state 130


State 128

   20 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


State 129

   19 parameter_list: parameter_list ',' identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 130

    8 type: ARRAY '[' NUM '.' '.' NUM ']' . OF standard_type

    OF  shift, and go to state 131


State 131

    8 type: ARRAY '[' NUM '.' '.' NUM ']' OF . standard_type
    9 standard_type: . INTEGER
   10              | . REAL

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 132


State 132

    8 type: ARRAY '[' NUM '.' '.' NUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
